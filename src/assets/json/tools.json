[
  {
    "id": "1",
    "title": "React + pure CSS + JavaScript",
    "description": "The first time I entered the field of Front-End Developer, I was already used to pure CSS, with the advantage of coding being neater and more orderly, because the framework and styles have separate files."
  },
  {
    "id": "2",
    "title": "React + Tailwind + JavaScript",
    "description": "With Tailwind in this stack, I can style a website page or application faster."
  },
  {
    "id": "3",
    "title": "React + Tailwind + Vite + TypeScript",
    "description": "With Vite and Typescript, I can deploy more neatly and faster because the features are lighter than Vite's built-in."
  },
  {
    "id": "4",
    "title": "NextJs + Tailwind + TypeScript",
    "description": "by using TypeScript and NextJS here I am able to make a more powerful website, because there are client side and server side features, here I can even optimize SEO better"
  },
  {
    "id": "5",
    "title": "Nuxt.js + Tailwind + TypeScript",
    "description": "Combining Nuxt.js with Tailwind and TypeScript allows for efficient development with server-side rendering capabilities and enhanced SEO optimization."
  },
  {
    "id": "6",
    "title": "NestJS + Prisma + TypeScript",
    "description": "NestJS, combined with Prisma and TypeScript, offers a powerful full-stack framework with a modular architecture and type-safe database interactions. Prisma makes working with databases easier, while TypeScript enhances code reliability and maintainability."
  },
  {
    "id": "7",
    "title": "NestJS + TypeORM + TypeScript",
    "description": "Using NestJS with TypeORM and TypeScript provides a robust full-stack solution with support for various databases. TypeORM simplifies database interaction with a flexible, type-safe ORM, while TypeScript ensures better scalability and maintainability."
  }
]
